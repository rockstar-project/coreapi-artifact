package {{packageName}}.domain;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import javax.inject.Inject;

import org.joda.time.DateTime;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import {{packageName}}.service.NotFoundException;
import {{packageName}}.service.NotUniqueException;
import {{packageName}}.service.{{capitalize classname}}Service;

@Service
@Transactional(readOnly=true)
public class {{capitalize classname}}ServiceImpl implements {{capitalize classname}}Service {
	
	@Inject private {{capitalize classname}}Repository {{classname}}Repository;
	
	public List<Product> getAllProducts() {
		Iterable<Product> productIterable = this.productRepository.findAll();
		return StreamSupport.stream(productIterable.spliterator(), false).collect(Collectors.toList());
	}
	
	public {{capitalize classname}} get{{capitalize classname}}(String {{classname}}Id) {
		return this.retrieve{{capitalize classname}}ById({{classname}}Id);
	}
	
	@Transactional(readOnly=false)
	public {{capitalize classname}} create{{capitalize classname}}({{capitalize classname}} {{classname}}) {
		{{capitalize classname}} updated{{capitalize classname}} = null;
		if ({{classname}} != null) {
			this.validateUnique{{capitalize classname}}({{classname}});
			updated{{capitalize classname}} = this.{{classname}}Repository.save({{classname}});
		}
		return updated{{capitalize classname}};
	}
	
	@Transactional(readOnly=false)
	public void update{{capitalize classname}}({{capitalize classname}} {{classname}}) {
		Product updatedProduct = null;
		
		updatedProduct = this.retrieveProductById(product.getId());
		
		if (StringUtils.hasText(product.getName())) {
			updatedProduct.setName(product.getName());
		}
		if (StringUtils.hasText(product.getTitle())) {
			updatedProduct.setTitle(product.getTitle());
		}
		if (StringUtils.hasText(product.getSubtitle())) {
			updatedProduct.setSubtitle(product.getSubtitle());
		}
		if (StringUtils.hasText(product.getState())) {
			updatedProduct.setState(product.getState());
		}
		if (StringUtils.hasText(product.getPrice())) {
			updatedProduct.setPrice(product.getPrice());
		}
		if (StringUtils.hasText(product.getVisibility())) {
			updatedProduct.setVisibility(product.getVisibility());
		}
		if (StringUtils.hasText(product.getDescription())) {
			updatedProduct.setDescription(product.getDescription());
		}
		if (StringUtils.hasText(product.getImage())) {
			updatedProduct.setImage(product.getImage());
		}
		if (StringUtils.hasText(product.getBlogUrl())) {
			updatedProduct.setBlogUrl(product.getBlogUrl());
		}
		if (product.getFeatured() != null) {
			updatedProduct.setFeatured(product.getFeatured());
		}
	}
	
	@Transactional(readOnly=false)
	public void deleteProduct(String productId) {
		this.productRepository.delete(this.retrieveProductById(productId));
	}
	
	private void validateUniqueProduct(Product product) {
		Product persistedProduct = null;
		
		if (!StringUtils.isEmpty(product.getName())) {
			persistedProduct = this.productRepository.findByName(product.getName());
			if (persistedProduct != null) {
				throw new NotUniqueException("product");
			}
		}
	}
	
	private Product retrieveProductById(String productId) {
		Product product = this.productRepository.findOne(productId);
		if (product == null) {
			throw new NotFoundException("product");
		}
		return product;
	}
}

