package {{packageName}};

{{#isEq datastoreValue 'cassandra'}}import java.util.UUID;{{/isEq}}
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
{{#definition}}
import com.{{organization}}.{{namespace}}.service.{{capitalize name}}Service;
import com.{{organization}}.{{namespace}}.service.NotFoundException;
{{#isNotEq entity.uniquefields.size 0}}import com.{{organization}}.{{namespace}}.service.NotUniqueException;{{/isNotEq}}
{{#entity.dateTimeType}}import org.joda.time.DateTime;{{/entity.dateTimeType}}
{{#entity.dateType}}import org.joda.time.LocalDate;{{/entity.dateType}}

@Service
@Transactional(readOnly=true)
public class {{capitalize name}}ServiceImpl implements {{capitalize name}}Service {
	
	@Autowired private {{capitalize repository.name}}Repository {{repository.name}}Repository;
	
	public Page<{{capitalize search.name}}> search({{#search.filters}}{{type}} {{camelcase name}}{{#iter.hasNext}}, {{/iter.hasNext}}{{/search.filters}}, Pageable pageRequest) {
		return this.{{repository.name}}Repository.findBy{{#search.filters}}{{capitalize name}}{{#iter.hasNext}}And{{/iter.hasNext}}{{/search.filters}}({{#search.filters}}{{camelcase name}}{{#iter.hasNext}}, {{/iter.hasNext}}{{/search.filters}}, pageRequest);
	}
	
	public {{capitalize name}} get{{capitalize name}}({{#isEq datastoreValue 'cassandra'}}UUID{{/isEq}}{{#isEq datastoreValue 'mysql'}}String{{/isEq}}{{#isEq datastoreValue 'mongodb'}}String{{/isEq}} {{name}}Id) {
		return this.retrieve{{capitalize name}}ById({{name}}Id);
	}
	
	@Transactional(readOnly=false)
	public {{capitalize name}} create{{capitalize name}}({{capitalize name}} {{name}}) {
		{{capitalize name}} updated{{capitalize name}} = null;
		if ({{name}} != null) {
			{{#isNotEq entity.uniquefields.size 0}}this.validateUnique{{capitalize name}}({{name}});{{/isNotEq}}
			updated{{capitalize name}} = this.{{repository.name}}Repository.save({{name}});
		}
		return updated{{capitalize name}};
	}
	
	@Transactional(readOnly=false)
	public void update{{capitalize entity.name}}({{capitalize entity.name}} {{entity.name}}) {
		{{capitalize entity.name}} current{{capitalize entity.name}} = null;
		Boolean modifyFlag = false;
		current{{capitalize entity.name}} = this.retrieve{{capitalize name}}ById({{name}}.getId());

		{{#entity.primitiveOrObjectFields}}
		{{type}} {{name}} = {{entity.name}}.get{{capitalize name}}();
		if ({{name}} != null{{#entity.stringTypes}} && !{{name}}.isEmpty(){{/entity.stringTypes}}) {
			current{{capitalize entity.name}}.set{{capitalize name}}({{name}});
			modifyFlag = true;
		}
		{{/entity.primitiveOrObjectFields}}
		
		if (modifyFlag) {
			this.{{repository.name}}Repository.save(current{{capitalize entity.name}});
		}
	}
	
	@Transactional(readOnly=false)
	public void delete{{capitalize name}}({{#isEq datastoreValue 'cassandra'}}UUID{{/isEq}}{{#isEq datastoreValue 'mysql'}}String{{/isEq}}{{#isEq datastoreValue 'mongodb'}}String{{/isEq}} {{name}}Id) {
		this.{{repository.name}}Repository.delete(this.retrieve{{capitalize name}}ById({{name}}Id));
	}
	
	{{#isNotEq entity.uniquefields.size 0}}private void validateUnique{{capitalize name}}({{capitalize name}} {{name}}) {
		if ({{name}} != null) {
			if (this.{{repository.name}}Repository.findBy{{repository.uniqueFieldsAndSeparated}}({{#entity.uniquefields}}{{entity.name}}.get{{capitalize name}}(){{#iter.hasNext}},{{/iter.hasNext}}{{/entity.uniquefields}}) != null) {
				throw new NotUniqueException("{{entity.name}}");
			}
		}
	}{{/isNotEq}}
	
	private {{capitalize name}} retrieve{{capitalize name}}ById({{#isEq datastoreValue 'cassandra'}}UUID{{/isEq}}{{#isEq datastoreValue 'mysql'}}String{{/isEq}}{{#isEq datastoreValue 'mongodb'}}String{{/isEq}} {{name}}Id) {
		{{capitalize name}} {{name}} = this.{{repository.name}}Repository.findOne({{name}}Id);
		if ({{name}} == null) {
			throw new NotFoundException("{{name}}");
		}
		return {{name}};
	}
	
}
{{/definition}}