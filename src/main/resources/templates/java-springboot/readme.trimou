### {{capitalize namespace}} REST API Microservice

#### Getting Started

* Install [Java 8](http://www.oracle.com/technetwork/java/javase/downloads/)
* [Download](https://maven.apache.org/download.cgi) and [install](https://maven.apache.org/install.html) Apache Maven build systemj.
* Download & Install [Docker Toolbox](https://www.docker.com/products/docker-toolbox) on your computer.
* Click Docker Quickstart Terminal icon to open command line console

##### Configure Environment

```sh
source environment.sh
```

#### Start virtual machine

```sh
docker-machine create -d virtualbox --virtualbox-memory 4096 {{architecture}}-{{namespace}}
eval $(docker-machine env {{architecture}}-{{namespace}})
```
{{#isEq datastoreValue "mysql" }}
#### Run MySQL database

```sh
docker-compose up -d {{namespace}}mysql
```
{{/isEq}}

#### Install {{capitalize namespace}} Schema

```sh
docker-compose -f docker-compose.develop.yml exec {{namespace}}mysql /bin/bash
mysql --user=$DATABASE_USER --password=$DATABASE_PASSWORD --database={{organization}}_db_{{namespace}} < schema.sql
```
{{#isEq discoveryValue "eureka" }}
#### Run Discovery Service

```sh
docker-compose -f docker-compose.develop.yml up -d discovery-service
```
{{/isEq}}
#### Run {{capitalize namespace}} API microservice

```sh
docker-compose -f docker-compose.develop.yml up -d {{namespace}}api
```

#### Connect to the API endpoint

```sh
curl http://$(docker-machine ip {{architecture}}-{{namespace}}):8080/{{pluralize namespace}} | jq .
```

{{#isEq datastoreValue "cassandra" }}
#### Verify Cassandra Datastore Installation

```sh
docker-compose -f docker-compose.develop.yml exec {{namespace}}cassandra /bin/bash
cqlsh
USE {{organization}}_db_{{namespace}};
select * from {{namespace}};

```
{{/isEq}}

#### Redeploy with code changes

```sh
docker-compose stop {{namespace}}api && docker-compose rm -f {{namespace}}api
docker rmi $DOCKER_REGISTRY/$DOCKER_NAMESPACE/{{architecture}}-{{namespace}}
mvn clean package
docker build -t $DOCKER_REGISTRY/$DOCKER_NAMESPACE/{{architecture}}-{{namespace}} .
docker-compose up -d {{namespace}}api
docker-compose logs --follow {{namespace}}api
```
