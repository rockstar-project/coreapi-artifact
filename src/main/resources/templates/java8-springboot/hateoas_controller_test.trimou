package {{packageName}};

import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.notNullValue;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.RequestDispatcher;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.hateoas.MediaTypes;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.MOCK)
@AutoConfigureMockMvc
public class CustomerControllerTest {

	@Autowired
	private ObjectMapper objectMapper;

	@Autowired
	private MockMvc mockMvc;

	@Test
	public void errorExample() throws Exception {
		this.mockMvc
		.perform(
				get("/error")
				.requestAttr(RequestDispatcher.ERROR_STATUS_CODE, 400)
				.requestAttr(RequestDispatcher.ERROR_REQUEST_URI, "/customers")
				.requestAttr(RequestDispatcher.ERROR_MESSAGE,
						"The customer 'http://localhost:8443/customers/123' does not exist"))
		.andDo(print())
		.andExpect(status().isBadRequest())
		.andExpect(jsonPath("error", is("Bad Request")))
		.andExpect(jsonPath("timestamp", is(notNullValue())))
		.andExpect(jsonPath("status", is(400)))
		.andExpect(jsonPath("path", is(notNullValue())));
	}

	@Test
	public void customersListExample() throws Exception {

		this.mockMvc
		.perform(get("/customers"))
		.andExpect(status().isOk());
	}

	@Test
	public void customersCreateExample() throws Exception {
		Map<String, String> customer = new HashMap<String, String>();
		customer.put("firstName", "Chris");
		customer.put("lastName", "Richardson");

		this.mockMvc
		.perform(
				post("/customers").contentType(MediaTypes.HAL_JSON).content(
						this.objectMapper.writeValueAsString(customer)))
		.andExpect(status().isCreated());
	}

	@Test
	public void customerGetExample() throws Exception {
		Map<String, String> customer = new HashMap<String, String>();
		customer.put("firstName", "Jez");
		customer.put("lastName", "Humble");

		String customerLocation = this.mockMvc
				.perform(
						post("/customers").contentType(MediaTypes.HAL_JSON).content(
								this.objectMapper.writeValueAsString(customer)))
				.andExpect(status().isCreated()).andReturn().getResponse()
				.getHeader("Location");

		this.mockMvc
		.perform(get(customerLocation))
		.andExpect(status().isOk())
		.andExpect(jsonPath("firstName", is(customer.get("firstName"))))
		.andExpect(jsonPath("lastName", is(customer.get("lastName"))))
		.andExpect(jsonPath("_links.self.href", is(customerLocation)));

	}

	@Test
	public void customerUpdateExample() throws Exception {
		Map<String, String> customer = new HashMap<String, String>();
		customer.put("firstName", "Martin");
		customer.put("lastName", "Fowler");

		String customerLocation = this.mockMvc
				.perform(
						post("/customers").contentType(MediaTypes.HAL_JSON).content(
								this.objectMapper.writeValueAsString(customer)))
				.andExpect(status().isCreated()).andReturn().getResponse()
				.getHeader("Location");

		this.mockMvc.perform(get(customerLocation)).andExpect(status().isOk())
		.andExpect(jsonPath("firstName", is(customer.get("firstName"))))
		.andExpect(jsonPath("lastName", is(customer.get("lastName"))))
		.andExpect(jsonPath("_links.self.href", is(customerLocation)));

		Map<String, String> customerUpdate = new HashMap<String, String>();
		customerUpdate.put("firstName", "Martin");
		customerUpdate.put("lastName", "Fowler");

		this.mockMvc
		.perform(
				put(customerLocation).contentType(MediaTypes.HAL_JSON).content(
						this.objectMapper.writeValueAsString(customerUpdate)))
		.andExpect(status().isCreated());
	}
}
